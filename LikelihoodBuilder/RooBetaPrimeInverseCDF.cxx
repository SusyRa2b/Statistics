/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooBetaPrimeInverseCDF.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "Math/Math.h"
#include "Math/QuantFuncMathCore.h"

ClassImp(RooBetaPrimeInverseCDF) 

 RooBetaPrimeInverseCDF::RooBetaPrimeInverseCDF(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _alpha,
                        RooAbsReal& _beta,
                        Bool_t _useComplement) :
   RooAbsReal(name,title), 
   x("x","x",this,_x),
   alpha("alpha","alpha",this,_alpha),
   beta("beta","beta",this,_beta),
   useComplement(_useComplement)
 { 
 } 


 RooBetaPrimeInverseCDF::RooBetaPrimeInverseCDF(const RooBetaPrimeInverseCDF& other, const char* name) :  
   RooAbsReal(other,name), 
   x("x",this,other.x),
   alpha("alpha",this,other.alpha),
   beta("beta",this,other.beta),
   useComplement(other.useComplement)
 { 
 } 



 Double_t RooBetaPrimeInverseCDF::evaluate() const 
 { 
   if(x<0 || x>1) return 0;
   double betaNonPrime ;
   if ( !useComplement ) {
      betaNonPrime = ROOT::Math::beta_quantile(x,alpha,beta);
   } else {
      betaNonPrime = ROOT::Math::beta_quantile_c(x,alpha,beta);
   }
   if (betaNonPrime == 1) return RooNumber::infinity();
   return betaNonPrime / (1-betaNonPrime);
 } 



