/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooNormalFromFlatPdf.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h"
#include "RooMath.h" 
#include <math.h> 
#include "TMath.h" 
#include "Math/Math.h"
#include "Math/QuantFuncMathCore.h"

ClassImp(RooNormalFromFlatPdf) 

 RooNormalFromFlatPdf::RooNormalFromFlatPdf(const char *name, const char *title, 
                        RooAbsReal& _parameter) :
   RooAbsPdf(name,title), 
   parameter("parameter","parameter",this,_parameter)
 { 
 } 


 RooNormalFromFlatPdf::RooNormalFromFlatPdf(const RooNormalFromFlatPdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   parameter("parameter",this,other.parameter)
 { 
 } 



 Double_t RooNormalFromFlatPdf::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   double x = ROOT::Math::normal_quantile(parameter,1.);
   //cout << "parameter is " << parameter << endl;
   //cout << "inverse CDF is " << x << endl;
   return exp(-0.5*x*x) ; 
 } 

 Int_t RooNormalFromFlatPdf::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const 
 {
   // Advertise analytical integral
   if (matchArgs(allVars,analVars,parameter)) return 1 ;
   return 0 ;
 }
 
 
 Double_t RooNormalFromFlatPdf::analyticalIntegral(Int_t code, const char* rangeName) const 
 {
   assert(code==1) ;
   if(parameter.min(rangeName)<=0. && parameter.max(rangeName)>=1.) return sqrt(2.*TMath::Pi());
   double newMin = ROOT::Math::normal_quantile(parameter.min(rangeName),1.);
   double newMax = ROOT::Math::normal_quantile(parameter.max(rangeName),1.);
   double oneOverRoot2 = 1./sqrt(2.);
   return sqrt(0.5*TMath::Pi())*(RooMath::erf(newMax*oneOverRoot2)-RooMath::erf(newMin*oneOverRoot2));
 }


 Int_t RooNormalFromFlatPdf::getGenerator(const RooArgSet& directVars, RooArgSet &generateVars, Bool_t /*staticInitOK*/) const
 {
   if (matchArgs(directVars,generateVars,parameter)) return 1 ;  
   return 0 ;
 }
 
 void RooNormalFromFlatPdf::generateEvent(Int_t code)
 {
   assert(code==1) ;
   if(code == 1) parameter.lvptr()->randomize();
   return;
 }


